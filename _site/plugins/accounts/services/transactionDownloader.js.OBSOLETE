(function () {
'use strict';

function Iterator(array) {
  this.cursor = 0;
  this.length = array.length;
  this.array  = array;
}
Iterator.prototype = {
  hasMore: function () {
    return this.cursor < this.length;
  },
  next: function () {
    return this.array[this.cursor++];
  }
};

var module = angular.module('fim.base');
module.factory('TransactionDownloader', function ($q, alerts, db, nxt) {

  function TransactionDownloader(account /* Account db model */) {
    var self = this;
    this.account = account;
    this.isBusy = false;
    this.canceller = $q.defer();
    this.canceller.promise.then(
      function () {
        self.isCancelled = true;
      }
    );
  }
  TransactionDownloader.prototype = {

    /**
     * Start downloading small packs from the begining until you find you have
     * all transactions in a single request already in db.
     * 
     * After that it could be there are even more transactions that you did not 
     * download.
     */
    start: function (pack_size) {
      if (this.isBusy) return;
      var self = this;

      /* get will recursivly keep looking for transactions */
      this.get(0, pack_size, function () {
        
        /* all `downloaded` transactions seem to be in the db already - 
            this can however be because we cancelled a download in the past */
        self.account.transactionCount().then(
          function (count) {

            /* XXX - optimize this please !! should use transaction.isLast 
               XXX - this has potential of never downloading some transactions 
                     if app is left in flux because of exception !!! */
            self.get(count - 1, pack_size);
          }
        );
      });
    },

    /* We have processed and downloaded all available transactions */
    onGetEnd: function (count, done) {
      if (count < this.count) {
        // done - there where less transactions downloaded then where requested
        this.isBusy = false;
        if (done) done();
      }
      else if (this.inserted == 0) {
        // done - all transactions where in the database already
        this.isBusy = false;
        if (done) done();
      }
      else if (this.isCancelled) {
        // done - this downloader was canceled
        this.isBusy = false;
        if (done) done();
      }
      else {
        this.get(this.index+this.count, this.count, done);
      }
    },

    processTransaction: function (transaction, next) {
      var self = this;
      db.transactions.where('transaction').equals(transaction.transaction).count(
        function (count) {
          if (count == 0) {
            self.inserted++;
            db.transactions.put(transaction).then(next);
          }
          else {
            next();
          }
        }
      );
    },

    get: function (index, count, callback) {
      var self = this;
      this.index = index;
      this.count = count;
      this.inserted = 0;
      this.isBusy = true;
      nxt.get(this.account.id_rs).getAccountTransactions(
        {
          account: this.account.id_rs,
          firstIndex: index,
          lastIndex: index + count - 1
        }, null, this.canceller)
      .then(
        function (transactions) { 
          var iterator = new Iterator(transactions);
          function recurse() {
            if (!self.isCancelled) {
              if (iterator.hasMore()) {
                self.processTransaction(iterator.next(), function () {
                  recurse();
                });
              }
              else {
                self.onGetEnd(iterator.length, callback);
              }
            } 
          }
          db.transaction("rw", db.transactions, function () {
            recurse();
          });
        },
        function (error) {
          if (error.errorCode != 5) {
            alerts.failed("Could not get transactions");
          }
        }
      );
    }
  };

  return {
    create: function (account) {
      return new TransactionDownloader(account);
    }
  };

})
})();